Import('env')

import os

env = env.Clone()
testlib_env = env.Clone()
tests_env = env.Clone()
gegl_tests_env = env.Clone()

def is_csource(fn):
    return os.path.isfile(fn) and os.path.splitext(fn)[1] == '.c'

def is_test(fn):
    return fn.startswith('test-') or fn.startswith('benchmark-')

tests_sources = [fn for fn in os.listdir("./") if is_test(fn) and is_csource(fn)]
testlib_sources = [fn for fn in os.listdir("./") if not is_test(fn) and is_csource(fn)]

if testlib_env['use_glib']:
    testlib_env.ParseConfig('pkg-config --cflags --libs glib-2.0')
testlib_env.Append(CPPPATH='../', LIBPATH='../..', LIBS=['mypaint-brushlib'])
testlib_env.SharedLibrary(target='../../mypaint-tests', source=testlib_sources)

# Build individual tests
if tests_env['use_glib']:
    tests_env.ParseConfig('pkg-config --cflags --libs glib-2.0')

tests_env.Append(CPPPATH='../', LIBPATH='../..', LIBS=['mypaint-brushlib', 'mypaint-tests'])

# Standard tests
for source in tests_sources:
    target = os.path.splitext(source)[0]
    tests_env.Program(target=target, source=source)

# Gegl tests
gegl_tests_sources = [os.path.join('./gegl', fn) for fn in os.listdir("./gegl") if is_test(fn) and is_csource(os.path.join('./gegl', fn))]
gegl_tests_env.ParseConfig('pkg-config --cflags --libs gegl-0.2')
gegl_tests_env.Append(CPPPATH=['.', '../', '../gegl'], LIBPATH='../..', LIBS=['mypaint-brushlib', 'mypaint-tests', 'mypaint-brushlib-gegl'])
if gegl_tests_env['enable_gegl']:
    for source in gegl_tests_sources:
        target = os.path.splitext(source)[0]
        target = os.path.basename(target)
        gegl_tests_env.Program(target=target, source=source)
